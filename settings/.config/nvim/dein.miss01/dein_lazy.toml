[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_ft = ['python']

[[plugins]]
repo = 'prabirshrestha/async.vim'
on_ft = ['python']

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_ft = ['python']
depends = ['async.vim']
hook_source='''
  #" vim-lspの各種オプション設定
  let g:lsp_signs_enabled = 1
  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_virtual_text_enabled = 1
  let g:lsp_signs_error = {'text': '✗'}
  let g:lsp_signs_warning = {'text': '‼'}
  let g:lsp_signs_information = {'text': 'i'}
  let g:lsp_signs_hint = {'text': '?'}
  
  #"定義ジャンプ(デフォルトのctagsによるジャンプを上書きしているのでこのあたりは好みが別れます)
  nnoremap <C-]> :<C-u>LspDefinition<CR>
  #"定義情報のホバー表示
  nnoremap K :<C-u>LspHover<CR>
  #"名前変更
  nnoremap <LocalLeader>R :<C-u>LspRename<CR>
  #"参照検索
  nnoremap <LocalLeader>n :<C-u>LspReferences<CR>
  #"Lint結果をQuickFixで表示
  nnoremap <LocalLeader>f :<C-u>LspDocumentDiagnostics<CR>
  #"テキスト整形
  nnoremap <LocalLeader>s :<C-u>LspDocumentFormat<CR>
  #"オムニ補完を利用する場合、定義の追加
  set omnifunc=lsp#complete
  
  #"lsp用フォーマッター
  augroup LspAutoFormatting
    autocmd!
    autocmd BufWritePre *.py LspDocumentFormatSync
  augroup END
'''

[[plugins]]
repo = 'ryanolsonx/vim-lsp-python'
on_ft = ['python']
depends = ['vim-lsp']
hook_source = '''
  #" pylsの設定。LinterのON/OFFなどが可能
  let s:pyls_config = {'pyls': {'plugins': {
    \   'pycodestyle': {'enabled': v:true},
    \   'pydocstyle': {'enabled': v:false},
    \   'pylint': {'enabled': v:false},
    \   'pyflakes': {'enabled': v:true},
    \   'flake8': {'enabled': v:true},
    \   'jedi_definition': {
    \     'follow_imports': v:true,
    \     'follow_builtin_imports': v:true,
    \   },
    \   'pyls_mypy': {
    \     'enabled': 1,
    \     'live_mode': 1,
    \   },
    \ }}}

  #" Pipfile自動探索
  function! s:findRoot(target)
  let dir = getcwd()
    while 1
      let files = split(globpath(l:dir, '*'), '\n')
      for f in l:files
        if a:target == fnamemodify(f, ':t')
          return l:dir
        endif
      endfor
      if l:dir == "/"
        break
      endif
      let dir = fnamemodify(l:dir, ':h')
    endwhile
    return ""
  endfunction
  autocmd FileType python call s:setVenv()

  #" Pipfileのあるディレクトリの.venvからライブラリ読み込み
  function! s:setVenv()
    let dir = s:findRoot('Pipfile')
    echo l:dir
    if dir != ""
      let $VIRTUAL_ENV = trim(system("cd " . l:dir . "; pipenv --venv"))
    endif
  endfunction
  autocmd FileType python call s:setVenv()
'''

hook_post_source = '''
  #" pylsの起動定義
  augroup LspPython
    autocmd!
    autocmd User lsp_setup call lsp#register_server({
      \ 'name': 'pyls',
      \ 'cmd': { server_info -> ['pyls'] },
      \ 'whitelist': ['python'],
      \ 'workspace_config': s:pyls_config
      \})
  augroup END
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
on_ft = ['python']

[[plugins]]
repo = 'liuchengxu/vista.vim'
on_ft = ['python']
hook_source = '''
  let g:vista_sidebar_width = 40
  let g:vista_echo_cursor = 0
  
  #" デフォルトの情報ソースをctagsにする
  let g:vista_default_executive = 'ctags'
  #" 特定の言語の場合vim-lspを利用した情報ソースを利用するようにする
  let g:vista_executive_for = {
    \ 'python': 'vim_lsp',
    \ }
  
  #" トグル(アウトラインを非表示の場合は表示、表示済みの場合は非表示に)
  nnoremap <silent> <Leader>o :<C-u>Vista!!<CR>
'''

