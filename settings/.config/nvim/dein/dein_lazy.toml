[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = 'all',
    highlight = {
        enable = true,
        disable = {},
    },
}
EOF
'''



# DenoでVimプラグインを開発するためのプラグイン
[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
 repo = 'Shougo/ddc.vim'
 on_event = 'InsertEnter'
 depends = ['denops.vim']
 hook_source = '''
 call ddc#custom#patch_global('completionMenu', 'pum.vim')
 call ddc#custom#patch_global('sources', ['nvim-lsp', 'around', 'file'])
 call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_fuzzy'],
      \   'sorters': ['sorter_fuzzy'],
      \   'converters': ['converter_fuzzy'],
      \ },
      \ 'around': {'mark': 'AROUND'},
      \ 'file': {'mark': 'FILE'},
      \ 'nvim-lsp': {
      \   'mark': 'LSP',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \ },
      \ })

 call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

 call ddc#enable()
'''

[[plugins]]
 repo = 'neovim/nvim-lspconfig'
 on_event = 'BufEnter'
 hook_source = '''
 lua << EOF
 local nvim_lsp = require('lspconfig')
 local on_attach = function (client, bufnr)
 local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
 local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

 local opts = { noremap=true, silent=true }
   buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
   buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
   buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
   buf_set_keymap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
   buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
   buf_set_keymap('n', 'gx', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
   buf_set_keymap('n', 'g[', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
   buf_set_keymap('n', 'g]', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
 end

 local lsp_installer = require("nvim-lsp-installer")
 lsp_installer.on_server_ready(function(server)
   local opts = {}
   opts.on_attach = on_attach
   server:setup(opts)
   vim.cmd [[ do User LspAttachBuffers ]]
 end)
EOF
'''

[[plugins]]
 repo ='williamboman/nvim-lsp-installer'
 on_source = 'nvim-lspconfig'

[[plugins]]
 repo = 'Shougo/ddc-nvim-lsp'
 on_source = 'ddc.vim'


[[plugins]]
 repo = 'matsui54/denops-popup-preview.vim'
 on_source = 'ddc.vim'
 depends = ['denops.vim']
 hook_source = '''
 call popup_preview#enable()
 '''

[[plugins]]
 repo = 'ray-x/lsp_signature.nvim'
 depends = ['vim-lsp']
 hook_source = '''
 lua require("lsp_signature").setup()
 '''


[[plugins]]
 repo = 'tani/ddc-fuzzy'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'Shougo/ddc-around'
 on_source = 'ddc.vim'

# ファイル名を補完するsource
[[plugins]]
 repo = 'LumaKernel/ddc-file'
 on_source = 'ddc.vim'

# ポップアップウィンドウを表示するプラグイン
[[plugins]]
 repo = 'Shougo/pum.vim'
 on_source = 'ddc.vim'
 hook_add = '''
 " inoremap <silent><expr> <TAB>
 "       \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
 "       \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
 "       \ '<TAB>' : ddc#manual_complete()
 inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
 inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
 inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
 inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
 '''

# [[plugins]]
#  repo = 'hrsh7th/vim-vsnip'
#  on_event = 'InsertEnter'
#  depends = ['vim-vsnip-integ', 'friendly-snippets']
#  hook_add = '''
#  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
#  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
#  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
#  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
#  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
#  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
#  let g:vsnip_filetypes = {}
#  '''

# [[plugins]]
#  repo = 'hrsh7th/vim-vsnip-integ'
# 
# [[plugins]]
#  repo = 'rafamadriz/friendly-snippets'

# [[plugins]]
# repo = 'lambdalisue/fern-git-status.vim'
# depends = ['fern.vim']
# hook_add = '''
# let g:fern_git_status#disable_ignored = 1
# 
# let g:fern_git_status#disable_untracked = 1
# 
# let g:fern_git_status#disable_submodules = 1
# 
# let g:fern_git_status#disable_directories = 1
# '''
# # hook_add = '''
# # #" Disable listing ignored files/directories
# # let g:fern_git_status#disable_ignored = 1
# # 
# # #" Disable listing untracked files
# # let g:fern_git_status#disable_untracked = 1
# # 
# # #" Disable listing status of submodules
# # let g:fern_git_status#disable_submodules = 1
# # 
# # #" Disable listing status of directories
# # let g:fern_git_status#disable_directories = 1
# # '''
# 
# [[plugins]]
# repo = 'heavenshell/vim-pydocstring'
# on_ft = ['python']
# hook_add = '''
# let g:pydocstring_doq_path = expand('~/.pyenv/shims/doq')
# let g:pydocstring_templates_path = expand('~/.config/nvim/vim-pydocstring/templates/')
# nmap <silent> <C-_> <Plug>(pydocstring)
# '''
# # let g:pydocstring_doq_path = '/home/kazu-0918/.pyenv/shims/doq'
# # let g:pydocstring_formatter = 'numpy'
# # let g:pydocstring_templates_path = '/home/kazu-0918/.config/nvim/vim-pydocstring/templates/'

# [[plugins]]
#  repo = 'mattn/vim-lsp-settings'
#  on_ft = ['python']
#  on_source = 'vim_lsp'
#  hook_add = '''
#    " Hide signcolumn.
#    let g:lsp_diagnostics_signs_enabled = 0
#    " Show diagnostics message to status line
#    let g:lsp_diagnostics_echo_cursor = 1
#    " Enable flake8 and mypy
#    let g:lsp_settings = {
#    \  'pylsp-all': {
#    \    'workspace_config': {
#    \      'pylsp': {
#    \        'configurationSources': [],
#    \      }
#    \    }
#    \  }
#    \}
#   let g:lsp_text_edit_enabled = 1
#   let g:lsp_virtual_text_enabled = 1
#   let g:lsp_diagnostics_highlights_enabled = 0
#   let g:lsp_diagnostics_enabled = 1
#  '''
# #    \        'plugins': {
# #    \          'pylsp_mypy': {
# #    \            'enabled': 1
# #    \          }
# #    \        }

