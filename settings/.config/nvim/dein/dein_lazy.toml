[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = 'all',
    highlight = {
        enable = true,
        disable = {},
    },
}
EOF
'''

# Deno依存のプラグインを動作させる
[[plugins]]
repo = 'vim-denops/denops.vim'

# 入力に対応して様々な補完候補を集約してポップアップする.
# 補完候補を生成するのはsource用プラグインの役割. 
[[plugins]]
 repo = 'Shougo/ddc.vim'
 on_event = 'InsertEnter'
 depends = ['denops.vim']
 hook_source = '''
 call ddc#custom#patch_global('completionMenu', 'pum.vim')
 call ddc#custom#patch_global('sources', ['nvim-lsp', 'vsnip', 'around', 'file'])
 call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_fuzzy'],
      \   'sorters': ['sorter_fuzzy'],
      \   'converters': ['converter_fuzzy'],
      \ },
      \ 'around': {'mark': 'AROUND'},
      \ 'file': {'mark': 'FILE'},
      \ 'vsnip': {'mark': 'VSNIP'},
      \ 'nvim-lsp': {
      \   'mark': 'LSP',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \   'minAutoCompleteLength': 1,
      \ },
      \ })

 call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

 call ddc#enable()
'''

[[plugins]]
 repo = 'neovim/nvim-lspconfig'
 on_event = 'BufEnter'
 hook_source = '''
 lua << EOF
 local nvim_lsp = require('lspconfig')

 -- language serverがバッファにアタッチされたときに実行する関数
 local on_attach = function (client, bufnr)
   local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
   local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

   local opts = { noremap=true, silent=true }
   buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
   buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
   buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
   buf_set_keymap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
   buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
   buf_set_keymap('n', 'gx', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
   buf_set_keymap('n', 'g[', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
   buf_set_keymap('n', 'g]', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
 end

 -- local servers = {
 --   pylsp = {
 --     cmd = {"pylsp"},
 --     root_dir = function(fname)
 --       local root_files = {
 --         'pyproject.toml',
 --         'setup.py',
 --         'setup.cfg',
 --         'requirements.txt',
 --         'Pipfile',
 --       }
 --       return util.root_pattern(unpack(root_files))(fname) or util.find_git_ancestor(fname)
 --     end,
 --     settings = {
 --       pylsp = {
 --         configurationSources = {"pylint"},
 --         plugins = {
 --           pylint = { enabled = true },
 --           flake8 = { enabled = false },
 --           pycodestyle = { enabled = false },
 --           pyflakes = { enabled = false },
 --         }
 --       }
 --     }
 --   }
 -- }

 -- リント表示の設定
 vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
   vim.lsp.diagnostic.on_publish_diagnostics, {
     -- -- Enable underline, use default values
     -- underline = true,
     underline = false,
     -- -- Enable virtual text, override spacing to 4
     -- virtual_text = {
     --   spacing = 4,
     -- },
     virtual_text = false,
     -- Use a function to dynamically turn signs off
     -- and on, using buffer local variables
     -- signs = function(bufnr, client_id)
     --   return vim.bo[bufnr].show_signs == false
     -- end,
     signs = true,
     -- -- Disable a feature
     update_in_insert = false,
   }
 )


 local lsp_installer = require("nvim-lsp-installer")

 -- サーバー起動時に自動でon_attachをアタッチする
 lsp_installer.on_server_ready(function(server)

   local capabilities = vim.lsp.protocol.make_client_capabilities()
   capabilities.textDocument.completion.completionItem.snippetSupport = true

   -- language serverごとにcapabilitiesを追加する必要があります。
   -- on_attachは必要に応じて
   -- require'lspconfig'.clangd.setup{on_attach = on_attach, capabilities = capabilities}
   local opts = {}
   opts.on_attach = on_attach
   opts.capabilities = capabilities
   server:setup(opts)
   vim.cmd [[ do User LspAttachBuffers ]]
 end)
EOF
'''

[[plugins]]
 repo ='williamboman/nvim-lsp-installer'
 on_source = 'nvim-lspconfig'

[[plugins]]
 repo = 'Shougo/ddc-nvim-lsp'
 on_source = 'ddc.vim'



# このアプリ単体でddcの候補選択中にシグネイチャーとドキュメントをポップアップする.
# 関数の引数入力中に他プラグインと連携してシグネイチャー情報を取得してポップアップする.
[[plugins]]
 repo = 'matsui54/denops-popup-preview.vim'
 on_source = 'ddc.vim'
 depends = ['denops.vim']
 hook_source = '''
 call popup_preview#enable()
 '''

# # 本来の用途は関数の()内入力中に自動シグネイチャーポップアップする為のものっぽいが、
# # その機能は有効化の方法が分からなかった。(denops-signature_helpで代用している)
# [[plugins]]
#  repo = 'ray-x/lsp_signature.nvim'
#  depends = ['nvim-lsp']
#  # on_source = ['ddc.vim', "denops-popup_preview"]
#  hook_source = '''
#  lua << EOF
#  require("lsp_signature").setup()
# EOF
#  '''

# 関数の()内入力中に関数定義とドキュメントの情報をdenops-popup-preview.vimに渡す.
# lsp_signature.nvimを正しく設定すればこのプラグイン無しでもできるっぽい？やり方がわからなかった
# 現在入力中の引数に対応したシグネイチャーのハイライトを有効にする方法がわからない.
[[plugins]]
 repo = 'matsui54/denops-signature_help'
 on_source = 'ddc.vim'
 hook_source = '''
 " let g:signature_help_config = {
 "     \   'style': 'virtual',
 "     \   'border': v:false,
 "     \ }
 call signature_help#enable()
 '''

[[plugins]]
 repo = 'tani/ddc-fuzzy'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'Shougo/ddc-around'
 on_source = 'ddc.vim'

# ファイル名を補完するsource
[[plugins]]
 repo = 'LumaKernel/ddc-file'
 on_source = 'ddc.vim'

# ポップアップウィンドウを表示するプラグイン
[[plugins]]
 repo = 'Shougo/pum.vim'
 on_source = 'ddc.vim'
 depends = ['vim-vsnip-integ']
 hook_add = '''
 inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
 inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
 inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
 inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>

 autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
 '''

[[plugins]]
 repo = 'hrsh7th/vim-vsnip'
 on_event = 'InsertEnter'
 depends = ['vim-vsnip-integ']
 hook_add = '''
 " Expand
 imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
 smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
 
 " Expand or jump
 imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
 smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
 
 " Jump forward or backward
 imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
 smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
 imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
 smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
 
 " Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
 " See https://github.com/hrsh7th/vim-vsnip/pull/50
 nmap        s   <Plug>(vsnip-select-text)
 xmap        s   <Plug>(vsnip-select-text)
 nmap        S   <Plug>(vsnip-cut-text)
 xmap        S   <Plug>(vsnip-cut-text)
 
 " If you want to use snippet for multiple filetypes, you can `g:vsnip_filetypes` for it.
 let g:vsnip_filetypes = {}
 let g:vsnip_filetypes.python = ['python']
 let g:vsnip_filetypes.javascriptreact = ['javascript']
 let g:vsnip_filetypes.typescriptreact = ['typescript']

 let g:vsnip_snippet_dir = expand('~/.config/nvim/vsnips')
 '''

[[plugins]]
 repo = 'hrsh7th/vim-vsnip-integ'
# 
# [[plugins]]
#  repo = 'rafamadriz/friendly-snippets'

# [[plugins]]
# repo = 'lambdalisue/fern-git-status.vim'
# depends = ['fern.vim']
# hook_add = '''
# let g:fern_git_status#disable_ignored = 1
# 
# let g:fern_git_status#disable_untracked = 1
# 
# let g:fern_git_status#disable_submodules = 1
# 
# let g:fern_git_status#disable_directories = 1
# '''
# # hook_add = '''
# # #" Disable listing ignored files/directories
# # let g:fern_git_status#disable_ignored = 1
# # 
# # #" Disable listing untracked files
# # let g:fern_git_status#disable_untracked = 1
# # 
# # #" Disable listing status of submodules
# # let g:fern_git_status#disable_submodules = 1
# # 
# # #" Disable listing status of directories
# # let g:fern_git_status#disable_directories = 1
# # '''
# 
# [[plugins]]
# repo = 'heavenshell/vim-pydocstring'
# on_ft = ['python']
# hook_add = '''
# let g:pydocstring_doq_path = expand('~/.pyenv/shims/doq')
# let g:pydocstring_templates_path = expand('~/.config/nvim/vim-pydocstring/templates/')
# nmap <silent> <C-_> <Plug>(pydocstring)
# '''
# # let g:pydocstring_doq_path = '/home/kazu-0918/.pyenv/shims/doq'
# # let g:pydocstring_formatter = 'numpy'
# # let g:pydocstring_templates_path = '/home/kazu-0918/.config/nvim/vim-pydocstring/templates/'

# [[plugins]]
#  repo = 'mattn/vim-lsp-settings'
#  on_ft = ['python']
#  on_source = 'vim_lsp'
#  hook_add = '''
#    " Hide signcolumn.
#    let g:lsp_diagnostics_signs_enabled = 0
#    " Show diagnostics message to status line
#    let g:lsp_diagnostics_echo_cursor = 1
#    " Enable flake8 and mypy
#    let g:lsp_settings = {
#    \  'pylsp-all': {
#    \    'workspace_config': {
#    \      'pylsp': {
#    \        'configurationSources': [],
#    \      }
#    \    }
#    \  }
#    \}
#   let g:lsp_text_edit_enabled = 1
#   let g:lsp_virtual_text_enabled = 1
#   let g:lsp_diagnostics_highlights_enabled = 0
#   let g:lsp_diagnostics_enabled = 1
#  '''
# #    \        'plugins': {
# #    \          'pylsp_mypy': {
# #    \            'enabled': 1
# #    \          }
# #    \        }

