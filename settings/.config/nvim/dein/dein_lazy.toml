[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = 'all',
    highlight = {
        enable = true,
        disable = {},
    },
}
EOF
'''

# [[plugins]] # カラースキーマ
# repo = 'altercation/vim-colors-solarized'
# hook_add = '''
#   set background=dark
#   " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
#   " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
#   augroup colorschemeSetting
#     autocmd!
#     autocmd VimEnter * ++nested colorscheme solarized
#   augroup END
# '''

# [[plugins]]
# repo = 'ryanolsonx/vim-lsp-python'
# on_ft = ['python']
# depends = ['vim-lsp']

# [[plugins]]
# repo = 'liuchengxu/vista.vim'
# on_ft = ['python']
# 
# [[plugins]]
# repo = 'mattn/vim-lsp-icons'
# on_ft = ['python']
# 
# [[plugins]]
# repo = 'Vimjas/vim-python-pep8-indent'
# on_ft = 'python'
# 
# [[plugins]]
# repo = 'lambdalisue/fern-git-status.vim'
# depends = ['fern.vim']
# hook_add = '''
# let g:fern_git_status#disable_ignored = 1
# 
# let g:fern_git_status#disable_untracked = 1
# 
# let g:fern_git_status#disable_submodules = 1
# 
# let g:fern_git_status#disable_directories = 1
# '''
# # hook_add = '''
# # #" Disable listing ignored files/directories
# # let g:fern_git_status#disable_ignored = 1
# # 
# # #" Disable listing untracked files
# # let g:fern_git_status#disable_untracked = 1
# # 
# # #" Disable listing status of submodules
# # let g:fern_git_status#disable_submodules = 1
# # 
# # #" Disable listing status of directories
# # let g:fern_git_status#disable_directories = 1
# # '''
# 
# [[plugins]]
# repo = 'heavenshell/vim-pydocstring'
# on_ft = ['python']
# hook_add = '''
# let g:pydocstring_doq_path = expand('~/.pyenv/shims/doq')
# let g:pydocstring_templates_path = expand('~/.config/nvim/vim-pydocstring/templates/')
# nmap <silent> <C-_> <Plug>(pydocstring)
# '''
# # let g:pydocstring_doq_path = '/home/kazu-0918/.pyenv/shims/doq'
# # let g:pydocstring_formatter = 'numpy'
# # let g:pydocstring_templates_path = '/home/kazu-0918/.config/nvim/vim-pydocstring/templates/'


# DenoでVimプラグインを開発するためのプラグイン
[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
 repo = 'Shougo/ddc.vim'
 on_event = 'InsertEnter'
 depends = ['denops.vim']
 hook_source = '''
 call ddc#custom#patch_global('completionMenu', 'pum.vim')
 call ddc#custom#patch_global('sources', ['vim-lsp', 'around', 'file', 'vsnip'])
 call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \ 'matchers': ['matcher_fuzzy'],
      \ 'sorters': ['sorter_fuzzy'],
      \ 'converters': ['converter_fuzzy'],
      \ },
      \ 'around': {'mark': 'AROUND'},
      \ 'file': {'mark': 'FILE'},
      \ 'vim-lsp': {
      \ 'mark': 'LSP',
      \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \ },
      \ })

 call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

 " inoremap <silent><expr> <TAB>
 "      \ ddc#map#pum_visible() ? '<C-n>' :
 "      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
 "      \ '<TAB>' : ddc#map#manual_complete()
 " inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

 call ddc#enable()
'''

[[plugins]]
 repo = 'matsui54/denops-popup-preview.vim'
 on_source = 'ddc.vim'
 # depends = ['denops.vim']
 hook_source = '''
 call popup_preview#enable()
 '''

[[plugins]]
 repo = 'ray-x/lsp_signature.nvim'
 depends = ['vim-lsp']
 hook_source = '''
 lua require("lsp_signature").setup()
 '''


[[plugins]]
 repo = 'tani/ddc-fuzzy'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'Shougo/ddc-around'
 on_source = 'ddc.vim'

# ファイル名を補完するsource
[[plugins]]
 repo = 'LumaKernel/ddc-file'
 on_source = 'ddc.vim'

# LSPの補完と連携するsource(vim/neovim両対応)
[[plugins]]
 repo = 'shun/ddc-vim-lsp'
 on_source = 'ddc.vim'
 depends = 'vim-lsp'

[[plugins]]
 repo = 'prabirshrestha/vim-lsp'
 on_ft = ['python']
 # on_func = 'lsp#enable'
 depends = 'ddc.vim'

[[plugins]]
 repo = 'mattn/vim-lsp-settings'
 on_ft = ['python']
 on_source = 'vim_lsp'

# ポップアップウィンドウを表示するプラグイン
[[plugins]]
 repo = 'Shougo/pum.vim'
 on_source = 'ddc.vim'
 hook_add = '''
 inoremap <silent><expr> <TAB>
       \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
       \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
       \ '<TAB>' : ddc#manual_complete()
 inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
 inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
 inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
 '''

# [[plugins]]
#  repo = 'Shougo/ddc-nvim-lsp'
#  on_source = 'ddc.vim'

# [[plugins]]
#  repo = 'hrsh7th/vim-vsnip'
#  on_event = 'InsertEnter'
#  depends = ['vim-vsnip-integ', 'friendly-snippets']
#  hook_add = '''
#  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
#  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
#  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
#  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
#  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
#  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
#  let g:vsnip_filetypes = {}
#  '''

# [[plugins]]
#  repo = 'hrsh7th/vim-vsnip-integ'
# 
# [[plugins]]
#  repo = 'rafamadriz/friendly-snippets'
