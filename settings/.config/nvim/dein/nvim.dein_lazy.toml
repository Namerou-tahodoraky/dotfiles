# ---------------------------------------------------------------------------------------------
# プラットフォーム系ツール.
# 他ツールが動作する為の依存関係.
# ---------------------------------------------------------------------------------------------

# Deno依存のプラグインを動作させる
[[plugins]]
repo = 'vim-denops/denops.vim'


# ---------------------------------------------------------------------------------------------
# ファイル/テキスト編集補助ツール.
# ---------------------------------------------------------------------------------------------

[[plugins]]
# treesitterを利用した自動インデントプラグイン.
# treesitterや別プラグインだとバグや誤動作がちょくちょくある.
repo = 'yioneko/nvim-yati'
on_source = 'nvim-treesitter'
hook_source = '''
lua <<EOF
require("nvim-treesitter.configs").setup {
  yati = { enable = true },
}
EOF
'''

[[plugins]]
# プロジェクト内のファイルの一斉置換
repo ='nvim-pack/nvim-spectre'
depends = ['plenary.nvim']
# on_source = 'nvim-lspconfig'
on_event = 'BufRead'
hook_source = '''
lua << EOF
require('spectre').setup()
EOF
'''
hook_add = '''
nnoremap <leader>R :lua require('spectre').open()<CR>
"search current word
nnoremap <leader>rw :lua require('spectre').open_visual({select_word=true})<CR>
vnoremap <leader>r :lua require('spectre').open_visual()<CR>
"  search in current file
nnoremap <leader>rp viw:lua require('spectre').open_file_search()<cr>
'''


# ---------------------------------------------------------------------------------------------
# カーソル移動補助ツール.
# ---------------------------------------------------------------------------------------------

[[plugins]]
# 移動補助
# /や?で検索した時検索先にeasymotionのような移動キーが表示される
repo = 'hrsh7th/vim-searchx'
hook_add = '''
" " Overwrite / and ?.
nnoremap ? <Cmd>call searchx#start({ 'dir': 0 })<CR>
nnoremap / <Cmd>call searchx#start({ 'dir': 1 })<CR>
xnoremap ? <Cmd>call searchx#start({ 'dir': 0 })<CR>
xnoremap / <Cmd>call searchx#start({ 'dir': 1 })<CR>
cnoremap ; <Cmd>call searchx#select()<CR>

" " Move to next/prev match.
" nnoremap N <Cmd>call searchx#prev_dir()<CR>
" nnoremap n <Cmd>call searchx#next_dir()<CR>
" xnoremap N <Cmd>call searchx#prev_dir()<CR>
" xnoremap n <Cmd>call searchx#next_dir()<CR>
" nnoremap <C-k> <Cmd>call searchx#prev()<CR>
" nnoremap <C-j> <Cmd>call searchx#next()<CR>
" xnoremap <C-k> <Cmd>call searchx#prev()<CR>
" xnoremap <C-j> <Cmd>call searchx#next()<CR>
" cnoremap <C-k> <Cmd>call searchx#prev()<CR>
" cnoremap <C-j> <Cmd>call searchx#next()<CR>

" Clear highlights
nnoremap <C-l> <Cmd>call searchx#clear()<CR>

let g:searchx = {}

" Auto jump if the recent input matches to any marker.
let g:searchx.auto_accept = v:true

" The scrolloff value for moving to next/prev.
let g:searchx.scrolloff = &scrolloff

" To enable scrolling animation.
" let g:searchx.scrolltime = 500
let g:searchx.scrolltime = 0

" Marker characters.
let g:searchx.markers = split('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '.\zs')

" Convert search pattern.
function g:searchx.convert(input) abort
  if a:input !~# '\k'
    return '\V' .. a:input
  endif
  return a:input[0] .. substitute(a:input[1:], '\\\@<! ', '.\\{-}', 'g')
endfunction
'''

[[plugins]]
# スムーズスクロール
repo = 'karb94/neoscroll.nvim'
on_event = 'BufEnter'
hook_source = '''
lua <<EOF
require('neoscroll').setup({
    mappings = {'<C-u>', '<C-d>', '<C-y>', '<C-e>'},
})
-- require('neoscroll').setup()
EOF
'''

# [[plugins]] # エラーが出て何個目かの情報が表示されない. # TODO: 調査.
# # 検索にヒットしたものが何個中何個目かをvertualtextで表示する
# repo = 'kevinhwang91/nvim-hlslens'
# on_event = 'BufEnter'
# hook_add = '''
# noremap <silent> n <Cmd>execute('normal! ' . v:count1 . 'nzz')<CR>
#             \<Cmd>lua require('hlslens').start()<CR>
# noremap <silent> N <Cmd>execute('normal! ' . v:count1 . 'Nzz')<CR>
#             \<Cmd>lua require('hlslens').start()<CR>
# '''

# [[plugins]] # nvim-hlslensを一旦消したのでこっちも合わせて消しておく # TODO: 戻す.
# # 検索時に勝手にカーソルが移動するのを防ぐ.
# # 選択範囲の文字列でアスタリスク検索する機能ももつ.
# # キーマップにvim-asteriskとnvim-hlslensの機能両方を結びつける為に、nvim-hlslensをdependsにしている.
# repo = 'haya14busa/vim-asterisk'
# # depends = ['nvim-hlslens']
# on_source = 'nvim-hlslens'
# hook_add = '''
# map * <Plug>(asterisk-z*)<Cmd>lua require('hlslens').start()<CR>
# map # <Plug>(asterisk-z#)<Cmd>lua require('hlslens').start()<CR>
# map g* <Plug>(asterisk-gz*)<Cmd>lua require('hlslens').start()<CR>
# map g# <Plug>(asterisk-gz#)<Cmd>lua require('hlslens').start()<CR>
# let g:asterisk#keeppos = 1
# '''


# ---------------------------------------------------------------------------------------------
# プログラミング補助.
# 自動補完などの入力補助系.
# ---------------------------------------------------------------------------------------------

# 入力に対応して様々な補完候補を集約してポップアップする.
# 補完候補を生成するのはsource用プラグインの役割. 
[[plugins]]
 repo = 'Shougo/ddc.vim'
 on_event = 'InsertEnter'
 depends = ['denops.vim']
 hook_source = '''
 call ddc#custom#patch_global('completionMenu', 'pum.vim')
 call ddc#custom#patch_global('sources', ['nvim-lsp', 'vsnip', 'around', 'file'])
 call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_fuzzy'],
      \   'sorters': ['sorter_fuzzy'],
      \   'converters': ['converter_fuzzy'],
      \ },
      \ 'around': {'mark': 'AROUND'},
      \ 'file': {'mark': 'FILE'},
      \ 'vsnip': {'mark': 'VSNIP'},
      \ 'nvim-lsp': {
      \   'mark': 'LSP',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \   'minAutoCompleteLength': 1,
      \ },
      \ })
 " call ddc#custom#patch_global('filterParams', {
 "  \   'matcher_fuzzy': {
 "  \     'splitMode': 'word'
 "  \   }
 "  \ })

 call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

 call ddc#enable()
'''
# LSPの補完開始を遅くする設定(主にTerraformのresource補完用)
hook_add = '''
nnoremap <silent> gcl :call ddc#custom#patch_global('sourceOptions', {'nvim-lsp': {'minAutoCompleteLength': 5}})<CR>
nnoremap <silent> gcs :call ddc#custom#patch_global('sourceOptions', {'nvim-lsp': {'minAutoCompleteLength': 1}})<CR>
'''


# [[plugins]] # TODO: 削除する.
# # インストール済みのlinterやforatterを呼び出しての出力結果をLSPに渡す
# repo ='jose-elias-alvarez/null-ls.nvim'
# depends = ['plenary.nvim']
# on_source = 'nvim-lspconfig'
# hook_source = '''
# lua << EOF
# require("null-ls").setup({
#     sources = {
#         -- require("null-ls").builtins.completion.spell,
#         require("null-ls").builtins.diagnostics.flake8,
#         require("null-ls").builtins.diagnostics.mypy,
#         require("null-ls").builtins.diagnostics.shellcheck,
#         require("null-ls").builtins.diagnostics.cfn_lint,
#         require("null-ls").builtins.formatting.ruff,
#         require("null-ls").builtins.diagnostics.ruff,
#         -- require("null-ls").builtins.diagnostics.mypy.with({
#         --     command = "pipenv run mypy",
#         -- }),
#     }
# })
# EOF
# '''

# [[plugins]] # TODO: 削除.
#  repo = 'Shougo/ddc-nvim-lsp'
#  on_source = 'ddc.vim'

[[plugins]]
# LSPの動作待ち中プログレスバーを表示する.
# pylspはおそらく対応していない. -> pyrightが対応しているっぽい.
# null-lsは対応している.
# terraform-lsはおそらく対応している.
 repo = 'j-hui/fidget.nvim'
 on_event = 'BufEnter'
 hook_source = '''
 lua require"fidget".setup{}
 '''


# ddcの候補選択中にシグネイチャーとドキュメントをポップアップする.
[[plugins]]
 repo = 'matsui54/denops-popup-preview.vim'
 on_source = 'ddc.vim'
 depends = ['denops.vim']
 hook_source = '''
 call popup_preview#enable()
 '''

# 関数の()内入力中にシグネイチャーをポップアップする.
# ddcやdenops-popup-preview.vimとは独立して動く.
[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
# depends = ['nvim-lsp']
# on_source = ['ddc.vim', "denops-popup_preview"]
on_event = 'BufRead'
hook_source = '''
lua << EOF
require("lsp_signature").setup()
EOF
 '''

[[plugins]]
 repo = 'tani/ddc-fuzzy'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'Shougo/ddc-around'
 on_source = 'ddc.vim'

# ファイル名を補完するsource
[[plugins]]
 repo = 'LumaKernel/ddc-file'
 on_source = 'ddc.vim'

# ポップアップウィンドウを表示するプラグイン
[[plugins]]
 repo = 'Shougo/pum.vim'
 on_source = 'ddc.vim'
 depends = ['vim-vsnip-integ']
 # <Tab>と<S-Tab>が何故か効かないのでいっそのことコメントアウトしている.
 hook_add = '''
 " "inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
 " "inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
 " "inoremap <silent><expr> <TAB>
 " "     \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
 " "     \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
 " "     \ '<TAB>' : ddc#manual_complete()
 " "inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
 inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
 inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>

 autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
 '''

[[plugins]]
# diagnosticsの一覧を表示する.diagnosticsの発生個所に飛べる.
# 一覧にカーソルを合わせるだけで発生個所が表示されるので、
# LSPのショートカットキーで一つずつ飛ぶより楽.
# 実行コマンド :TroubleToggle
# 実行コマンド :TroubleRefresh
repo = 'folke/trouble.nvim'
depends = ['nvim-web-devicons']
on_event = 'BufRead'
hook_source = '''
lua << EOF
require("trouble").setup {}
EOF
'''


# [[plugins]] # TODO: 更新対応.
#  repo = 'hrsh7th/vim-vsnip'
#  on_event = 'InsertEnter'
#  depends = ['vim-vsnip-integ']
#  hook_add = '''
#  " Expand
#  imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
#  smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
#  
#  " Expand or jump
#  imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
#  smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
#  
#  " Jump forward or backward
#  imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
#  smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
#  imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
#  smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
#  
#  " " Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
#  " " See https://github.com/hrsh7th/vim-vsnip/pull/50
#  " nmap        s   <Plug>(vsnip-select-text)
#  " xmap        s   <Plug>(vsnip-select-text)
#  " nmap        S   <Plug>(vsnip-cut-text)
#  " xmap        S   <Plug>(vsnip-cut-text)
#  
#  " If you want to use snippet for multiple filetypes, you can `g:vsnip_filetypes` for it.
#  let g:vsnip_filetypes = {}
#  let g:vsnip_filetypes.python = ['python']
#  " let g:vsnip_filetypes.javascriptreact = ['javascript']
#  " let g:vsnip_filetypes.typescriptreact = ['typescript']
# 
#  " let g:vsnip_snippet_dir = expand('~/.config/nvim/vsnips')
#  let g:vsnip_snippet_dirs = []
#  let g:vsnip_snippet_dirs += ['~/.config/nvim/vsnips/python']
#  let g:vsnip_snippet_dirs += ['~/.config/nvim/vsnips/python/pytest']
#  let g:vsnip_snippet_dirs += ['~/.config/nvim/vsnips/terraform']
#  '''
# 
# [[plugins]]
#  repo = 'hrsh7th/vim-vsnip-integ'


# # ---------------------------------------------------------------------------------------------
# # デバッグツール.
# # ---------------------------------------------------------------------------------------------
# [[plugins]]
# # デバッグツール
# # ステップイン: 1行進む.
# # ステップオーバー: 1行進む.進み先が関数内に入る場合は、関数内はスキップする.
# # ステップアウト: そのスコープを出るまで進む.
# repo = 'mfussenegger/nvim-dap'
# on_ft = ['python']
# hook_add = '''
# nnoremap <silent> <Leader>0 :lua require'dap'.continue()<CR>
# nnoremap <silent> <Leader>1 :lua require'dap'.step_into()<CR>
# nnoremap <silent> <Leader>2 :lua require'dap'.step_over()<CR>
# nnoremap <silent> <Leader>3 :lua require'dap'.step_out()<CR>
# nnoremap <silent> <leader>dq :lua require'dap'.terminate(); require'dapui'.close()<CR>
# nnoremap <silent> <leader>db :lua require'dap'.toggle_breakpoint()<CR>
# nnoremap <silent> <leader>dc :lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
# nnoremap <silent> <leader>dB :lua require'dap'.clear_breakpoints()<CR>
# " nnoremap <silent> <leader>dp :lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
# " nnoremap <silent> <leader>dr :lua require'dap'.repl.open()<CR>
# '''
# 
# [[plugins]]
# # 
# repo = 'mfussenegger/nvim-dap-python'
# depends = ['nvim-dap']
# on_ft = 'python'
# hook_source = '''
# lua << EOF
# pythonPath = function()
#   -- debugpy supports launching an application with a different interpreter then the one used to launch debugpy itself.
#   -- The code below looks for a `venv` or `.venv` folder in the current directly and uses the python within.
#   -- You could adapt this - to for example use the `VIRTUAL_ENV` environment variable.
#   local cwd = vim.fn.getcwd()
#   if vim.fn.executable(cwd .. '/venv/bin/python') == 1 then
#     return cwd .. '/venv/bin/python'
#   elseif vim.fn.executable(cwd .. '/.venv/bin/python') == 1 then
#     return cwd .. '/.venv/bin/python'
#   else
#     return '/usr/bin/python'
#   end
# end;
# 
# require('dap-python').setup(pythonPath())
# require('dap-python').test_runner = 'pytest'
# EOF
# '''
# 
# [[plugins]]
# # デバッグツール
# # デバッグ画面
# repo = 'rcarriga/nvim-dap-ui'
# # depends = ['nvim-dap']
# # on_ft = ['python']
# on_source = ['nvim-dap']
# hook_source = '''
# lua << EOF
# require('dapui').setup()
# 
# -- デバッグ開始時に自動でUI画面を開く.
# require'dap'.listeners.before['event_initialized']['custom'] = function(session, body)
#   require'dapui'.open()
# end
# -- デバッグ終了時に自動でUI画面を閉じる.
# require'dap'.listeners.before['event_terminated']['custom'] = function(session, body)
#   require'dapui'.close()
# end
# EOF
# '''
# 
# [[plugins]]
# # デバッグツール
# # 変数の値をvertualtextで表示する
# repo = 'theHamsta/nvim-dap-virtual-text'
# # depends = ['nvim-dap']
# on_ft = ['python']
# hook_source = '''
# lua << EOF
# -- require("nvim-dap-virtual-text").setup()
# require("nvim-dap-virtual-text").setup {
#     enabled = true,                     -- enable this plugin (the default)
#     enabled_commands = true,            -- create commands DapVirtualTextEnable, DapVirtualTextDisable, DapVirtualTextToggle, (DapVirtualTextForceRefresh for refreshing when debug adapter did not notify its termination)
#     highlight_changed_variables = false, -- highlight changed values with NvimDapVirtualTextChanged, else always NvimDapVirtualText
#     highlight_new_as_changed = false,   -- highlight new variables in the same way as changed variables (if highlight_changed_variables)
#     show_stop_reason = true,            -- show stop reason when stopped for exceptions
#     commented = false,                  -- prefix virtual text with comment string
#     -- experimental features:
#     virt_text_pos = 'eol',              -- position of virtual text, see `:h nvim_buf_set_extmark()`
#     all_frames = false,                 -- show virtual text for all stack frames not only current. Only works for debugpy on my machine.
#     virt_lines = false,                 -- show virtual lines instead of virtual text (will flicker!)
#     virt_text_win_col = nil             -- position the virtual text at a fixed window column (starting from the first text column) ,
#                                         -- e.g. 80 to position at column 80, see `:h nvim_buf_set_extmark()`
# }
# EOF
# '''

# ---------------------------------------------------------------------------------------------
# カスタマイズ設定の索引ツール.
# ---------------------------------------------------------------------------------------------

[[plugins]]
# キーバインドを通知
repo = 'liuchengxu/vim-which-key'
hook_add = '''
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
'''


# ---------------------------------------------------------------------------------------------
# 画面描画ツール(色, アイコン,ステータスラインなど)
# ---------------------------------------------------------------------------------------------

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = 'all',
    highlight = {
        enable = true,
        disable = {},
    },
    -- 編集中に動くのが気持ち悪い.挙動が予測しにくい.
    -- indent = {
    --     enable = true,
    -- },
}
EOF
'''

# [[plugins]] # 少し使ってみたけど余り目に馴染まないから消した. # TODO: 削除検討.
# repo = 'p00f/nvim-ts-rainbow'
# on_source = 'nvim-treesitter'
# hook_source = '''
# lua <<EOF
# require("nvim-treesitter.configs").setup {
#   -- highlight = {
#   --     -- ...
#   -- },
#   -- -- ...
#   rainbow = {
#     enable = true,
#     -- disable = { "jsx", "cpp" }, list of languages you want to disable the plugin for
#     extended_mode = true, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
#     max_file_lines = nil, -- Do not enable for files with more than n lines, int
#     -- colors = {}, -- table of hex strings
#     -- termcolors = {} -- table of colour name strings
#   }
# }
# EOF
# '''

[[plugins]]
# インデントの可視化
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = 'BufEnter'
hook_source = '''
lua <<EOF
require("indent_blankline").setup {
    show_first_indent_level = false,
}
EOF
'''

[[plugins]]
# テキストベースのスクロールバーを表示する
repo = 'Xuyuanp/scrollbar.nvim'
# on_event = 'BufEnter'
on_event = ['BufEnter', 'BufNewFile']
# on_event = ['WinScrolled','VimResized','QuitPre', 'WinEnter', 'FocusGained']
hook_source = '''
augroup ScrollbarInit
  autocmd!
  autocmd WinScrolled,VimResized,QuitPre * silent! lua require('scrollbar').show()
  autocmd WinEnter,FocusGained           * silent! lua require('scrollbar').show()
  autocmd WinLeave,BufLeave,BufWinLeave,FocusLost            * silent! lua require('scrollbar').clear()
augroup end
'''


[[plugins]]
# 
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
# 
repo = 'nvim-lualine/lualine.nvim'
depends = ['nvim-web-devicons']
on_event = 'BufRead'
hook_source = '''
lua << EOF
require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'auto',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {},
    always_divide_middle = true,
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diagnostics'}, -- {'branch', 'diff', 'diagnostics'},
    lualine_c = {'filename'},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {}, -- {'progress'},
    lualine_z = {}, -- {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  extensions = {}
}
EOF
'''

[[plugins]]
# 
repo = 'akinsho/bufferline.nvim'
on_event = 'BufRead'
depends = ['nvim-web-devicons']
hook_source = '''
lua << EOF
vim.opt.termguicolors = true
require("bufferline").setup{}
EOF
'''

# ---------------------------------------------------------------------------------------------
# ファジーファインダー系
# ---------------------------------------------------------------------------------------------
# [[plugins]]
# repo = 'Shougo/ddu.vim'
# depends = 'denops.vim'
# on_source = 'denops.vim'
