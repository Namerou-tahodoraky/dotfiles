[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'folke/tokyonight.nvim'
hook_add = '''
let g:tokyonight_style = "night"
'''

[[plugins]]
# f移動の拡張.
# ;,によるリピートからfF連打によるリピートに変更される.(;,は効かなくなる)
# ヒット文字がハイライトされる. 行をまたいでヒットする.
# 日本語にヒットする
# fが上書きされる関係で異なる文字のf移動を連続でやりたい場合は,一度hlで横移動してfの入力待ち状態を切る必要がある.
# lfで手癖にしても問題なさそう.
repo = 'rhysd/clever-f.vim'
hook_add = '''
let g:clever_f_fix_key_direction = 1  "検索開始がf,Fどちらでもリピート移動の方向を固定する.
let g:clever_f_use_migemo = 1  "日本語がヒットする
let g:clever_f_smart_case = 1  "大文字を入力した時は大文字のみ、小文字を入力した時は両方にヒットする.
let g:clever_f_timeout_ms = 5000  "指定時間でfFのリピート移動が切れる
let g:clever_f_highlight_timeout_ms = 5000  "指定時間でfFのリピート移動が切れる
" map ; <Plug>(clever-f-repeat-forward) ";へのマッピングを残す. which-key.vimとバッティングするっぽい
" map , <Plug>(clever-f-repeat-back) ",へのマッピングを残す. which-key.vimとバッティングするっぽい
'''

[[plugins]]
# f移動の補助.
# カーソル行に存在する各単語について、fで一発で移動できる場所(ユニークな文字)がハイライトされる.
# 移動後にciwなどで単語に対して操作する場合はその単語上のどの文字に移動してもいいので、そういう状況で便利.
repo = 'unblevable/quick-scope'
hook_add = '''
let g:qs_max_chars=120
'''

# [[plugins]]
# # キャメルケース,スネークケースの移動とtextobjとして扱う機能.
# # ,はfの逆移動に遅延が起きるからちょっと悩む.(clever-f.vimを導入したことで,のマッピングは消えたので解決).
# # スネークケースでの移動選択もできる.AA_BB_CCでBBの上でdi,wを押すとAA_CCになる(後ろの_は消えるので注意).
# repo = 'bkad/CamelCaseMotion'
# hook_add = '''
# let g:camelcasemotion_key = ','
# '''

[[plugins]]
# 空白を無視したインデント数ベースの移動.
# sで同インデント内の移動.深いインデントから浅いインデントには抜けれる.現在行より浅いインデント行は無視される.
# Shiftで最も浅いインデント部分に移動.
# 開始と終了に^をつけることで,移動開始列に関係なく動作するようにしている.
repo = 'tyru/columnskip.vim'
hook_add = '''
map SJ ^<Plug>(columnskip:nonblank:next)^
map SK ^<Plug>(columnskip:nonblank:prev)^
map sj  ^<Plug>(columnskip:first-nonblank:next)^
map sk  ^<Plug>(columnskip:first-nonblank:prev)^
'''

[[plugins]]
# ドットリピートの多対応化.
repo = 'tpope/vim-repeat'

[[plugins]]
# マルチカーソル
repo = 'mg979/vim-visual-multi'

[[plugins]]
# operator操作系プラグインの依存元
repo = 'kana/vim-operator-user'

[[plugins]]
# オペレータ動作時にカーソルが開始地点に動くのを防ぐ.
repo = 'osyo-manga/vim-operator-stay-cursor'
depends = ['vim-operator-user']
hook_add = '''
map y <Plug>(operator-stay-cursor-yank)
map gu <Plug>(operator-stay-cursor-gu)
map gU <Plug>(operator-stay-cursor-gU)
'''

[[plugins]]
# ヤンク済みの文字列で上書きする.
repo = 'kana/vim-operator-replace'
depends = ['vim-operator-user']
hook_add = '''
nmap R <Plug>(operator-replace)
'''

[[plugins]]
# コメント操作.
# <Leader>cj: トグル(jの理由は押しやすいから)
# <Leader>ca: 末尾にコメント挿入
# よくやるタイポ：先にcを押してしまい挿入モードになって元の文字を消してしまう.<Leader>さえしっかり入力していれば残りは急ぐ必要はない.
repo = 'tyru/caw.vim'
depends = ['vim-operator-user']
hook_add = '''
nmap <Leader>c      <Plug>(caw:prefix)
vmap <Leader>c      <Plug>(caw:prefix)
nmap <Leader>cj     <Plug>(caw:hatpos:toggle)
vmap <Leader>cj     <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
# 長さが同じブロック行をtextobjとして扱う.
# C+vやvim-operator-blockwiseで同じことができるので直接使わない.
# vim-operator-blockwiseの必須プラグインなので導入している.
repo = 'osyo-manga/vim-textobj-blockwise'
depends = ['vim-textobj-user']

[[plugins]]
# 長さの違うブロック行に対するoperator.
# myiw, mRib, mdif/など.入力後に<ENTER>必須.
# yank時ハイライトが出ないので注意. vは対応してない.
repo = 'osyo-manga/vim-operator-blockwise'
depends = ['vim-textobj-blockwise', 'vim-operator-replace']
on_map = ['<Plug>(operator-blockwise-yank-head)', '<Plug>(operator-blockwise-delete-head)', '<Plug>(operator-blockwise-change-head)']
hook_add = '''
nmap my <Plug>(operator-blockwise-yank-head)
nmap md <Plug>(operator-blockwise-delete-head)
nmap mc <Plug>(operator-blockwise-change-head)
nmap <expr> mR operator#blockwise#mapexpr_head("\<Plug>(operator-replace)")
'''


[[plugins]]
# textobj拡張プラグインの依存元
repo = 'kana/vim-textobj-user'

# [[plugins]]
# # インデントを対象に操作
# # 動作しない
# repo = 'kana/vim-textobj-indent'
# # depends = ['vim-textobj-user']
# hook_add = '''
# nmap ai <Plug>(textobj-indent-a)
# nmap ii <Plug>(textobj-indent-i)
# nmap aI <Plug>(textobj-indent-same-a)
# nmap iI <Plug>(textobj-indent-same-i)
# '''

[[plugins]]
# インデントと改行を除く一行をtextobjとして扱う.
# yil, dil, cil, vil
# hook_addでキーマップを書くと動かなくなる.
repo = 'kana/vim-textobj-line'
depends = ['vim-textobj-user']

[[plugins]]
# 任意の文字で挟まれた範囲をtextobjとして扱う.
# cif_, dif/ など
repo = 'thinca/vim-textobj-between'
depends = ['vim-textobj-user']

[[plugins]]
# (,)を区切りとする関数引数部分をtextobjとして扱う.
# ci,やda,など
repo = 'sgur/vim-textobj-parameter'
depends = ['vim-textobj-user']

[[plugins]]
# コメント部分をtextobjとして扱う.
# vac, dac など
# 複数行に対して実施する用途が主であり、複数行に対してはaを使う.
repo = 'glts/vim-textobj-comment'
depends = ['vim-textobj-user']

[[plugins]]
# 対象ブロック内をtextobjとして扱う.
# 対象は(),[],{},<>,"",''
# cib, yibなど.
repo = 'osyo-manga/vim-textobj-multiblock'
depends = ['vim-textobj-user']
hook_add = '''
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
vmap ab <Plug>(textobj-multiblock-a)
vmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
# 同インデントの範囲をtextobjとして扱う.
# viiなど.
# 空行を無視できるのでvipとはそこで差別化できる.
# vaiは上下の外側の行も含まれるので、JSON形式などでは役立つかも.
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
# スネークケースやキャメルケースの1単語をtextobjとして扱う.
# div, dav, civなど.
# aaa_bbb_cccにおいて、avとすると aaa_(bbb_)cccが範囲になる.後ろの区切り文字が含まれる.
# キャメルケースの場合はaにしても範囲の変化はなし.
depends = ['vim-textobj-user']
repo = 'Julian/vim-textobj-variable-segment'

[[plugins]]
# "や(などのペアを自動補完する.
repo = 'cohama/lexima.vim'
# hook_add = '''
# let g:lexima_enable_newline_rules = 0
# '''

[[plugins]]
# 区切り文字で整形
# alip=  段落を対象に=で位置を整形 -> aで待ちが発生するし複雑だから止めた.
# alip*| 段落を対象に同列内の全ての|の位置を整形, テーブル表記とか -> aで待ちが発生するし複雑だから止めた.
# 選択-> al -> =入力  選択範囲で=位置で整形
repo = 'junegunn/vim-easy-align'
hook_add = '''
" xmap al <Plug>(EasyAlign)
" nmap al <Plug>(EasyAlign)
vmap al <Plug>(EasyAlign)
'''

[[plugins]]
# ""や()などを対象に追加削除置換する.
# saiw", srb", sdbなど
repo = 'machakann/vim-sandwich'

[[plugins]]
# 選択矩形の拡大縮小.
repo = 'terryma/vim-expand-region'
hook_add = '''
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
'''

[[plugins]]
# undotreeのTUI操作
repo = 'mbbill/undotree'
hook_add = '''
" undofileを保存したい場合
" if has("persistent_undo")
"    let target_path = expand('~/.undodir')
" 
"     " create the directory and any parent directories
"     " if the location does not exist.
"     if !isdirectory(target_path)
"         call mkdir(target_path, "p", 0700)
"     endif
" 
"     let &undodir=target_path
"     set undofile
" endif
let g:undotree_ShortIndicators = 1      " 時間単位は短く表示
let g:undotree_SetFocusWhenToggle = 1   " undotreeを開いたらフォーカスする
noremap <Leader>u :UndotreeToggle<CR>
" undotreeバッファ内でのキーバインド設定
function! g:Undotree_CustomMap()
    map <silent> <buffer> <Esc> q
    map <silent> <buffer> h ?
endfunction
'''

[[plugins]]
# 任意の単語をハイライト状態で維持する
# lazyだと動かない
repo = 't9md/vim-quickhl'
hook_add = '''
nmap <leader>ha <Plug>(quickhl-manual-this)
xmap <leader>ha <Plug>(quickhl-manual-this)
nmap <leader>hc <Plug>(quickhl-manual-clear)
xmap <leader>hc <Plug>(quickhl-manual-clear)
nmap <leader>hC <Plug>(quickhl-manual-reset)
'''

# [[plugins]]
# repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
hook_add = '''
" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" "" Using Lua functions
" "nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
" "nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
" "nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
" "nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>
'''

# [[plugins]]
# repo = 'airblade/vim-gitgutter'
# 
# [[plugins]]
# repo = 'tpope/vim-fugitive'
# 
# [[plugins]]
# # 文字検索時マッチング個数と何番目かを表示するプラグイン
# repo = 'osyo-manga/vim-anzu'
# hook_add = '''
# nmap n <Plug>(anzu-n-with-echo)
# nmap N <Plug>(anzu-N-with-echo)
# nmap * <Plug>(anzu-star-with-echo)
# nmap # <Plug>(anzu-sharp-with-echo)
# '''
# #nmap <Esc><Esc> <Plug>(anzu-clear-search-status)#効かない？
# 
# [[plugins]]
# # 多形式対応のシンタックスハイライト
# repo = 'sheerun/vim-polyglot'
# 
# [[plugins]]
# # インデントの可視化
# repo = 'Yggdroot/indentLine'
# 
# [[plugins]]
# # 行末空白の可視化
# repo = 'bronson/vim-trailing-whitespace'
# 
# [[plugins]]
# # 画面スクロール過程を可視化
# repo = 'yuttie/comfortable-motion.vim'
# 
# [[plugins]]
# # ウィンドウサイズ変更の簡易化
# repo = 'simeji/winresizer'
# hook_add = '''
# let g:winresizer_vert_resize = 2
# let g:winresizer_horiz_resize = 1
# '''
# 
# [[plugins]]
# # ウィンドウのひとつを最大化
# # 動くけどエラーがたくさんでる.NeoVim未対応？
# repo = 'vim-scripts/ZoomWin'
# 
# [[plugins]]
# # チートシート表示
# repo = 'reireias/vim-cheatsheet'
# hook_add = '''
# let g:cheatsheet#cheat_file = '~/.cheetsheets/sample.md'
# let g:cheatsheet#float_window = 1
# " you can change float window size.
# let g:cheatsheet#float_window_width_ratio = 0.6
# let g:cheatsheet#float_window_height_ratio = 0.6
# '''
# #augroup vimrc_filetype
# #  autocmd!
# #  autocmd FileType zsh let g:cheatsheet#cheat_file = '~/.cheatsheet-zsh.md'
# #augroup END
# 
# [[plugins]]
# # ファイルツリー
# repo = 'lambdalisue/fern.vim'
# hook_add = '''
# nnoremap <C-n> :Fern . -reveal=% -drawer -toggle -width=40<CR>
# '''
