[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'folke/tokyonight.nvim'
hook_add = '''
let g:tokyonight_style = "night"
'''

[[plugins]]
# キャメルケースの移動,テキストオブジェクト選択
# ,はfの逆移動に遅延が起きるからちょっと悩む
repo = 'bkad/CamelCaseMotion'
hook_add = '''
let g:camelcasemotion_key = ','
'''

# [[plugins]]
# # 段落移動.
# # 微妙かも.暫く使ってみる.
# repo = 'haya14busa/vim-edgemotion'
# hook_add = '''
# map <C-j> <Plug>(edgemotion-j)
# map <C-k> <Plug>(edgemotion-k)
# '''

[[plugins]]
# ドットリピートの多対応化.
repo = 'tpope/vim-repeat'

[[plugins]]
# operator操作系プラグインの依存元
repo = 'kana/vim-operator-user'

[[plugins]]
# オペレータ動作時にカーソルが開始地点に動くのを防ぐ.
repo = 'osyo-manga/vim-operator-stay-cursor'
depends = ['vim-operator-user']
hook_add = '''
map y <Plug>(operator-stay-cursor-yank)
map gu <Plug>(operator-stay-cursor-gu)
map gU <Plug>(operator-stay-cursor-gU)
'''

[[plugins]]
# ヤンク済みの文字列で上書きする.
repo = 'kana/vim-operator-replace'
depends = ['vim-operator-user']
hook_add = '''
nmap R <Plug>(operator-replace)
'''

[[plugins]]
# コメント操作.
repo = 'tyru/caw.vim'
depends = ['vim-operator-user']

[[plugins]]
# textobj拡張プラグインの依存元
repo = 'kana/vim-textobj-user'

# [[plugins]]
# # インデントを対象に操作
# # 動作しない
# repo = 'kana/vim-textobj-indent'
# # depends = ['vim-textobj-user']
# hook_add = '''
# nmap ai <Plug>(textobj-indent-a)
# nmap ii <Plug>(textobj-indent-i)
# nmap aI <Plug>(textobj-indent-same-a)
# nmap iI <Plug>(textobj-indent-same-i)
# '''

[[plugins]]
# インデントと改行を除く一行に対する操作.
# yil, dil, cil, vil
# alはeasy-alignに設定しているので押さないこと.
# hook_addでキーマップを書くと動かなくなる.
repo = 'kana/vim-textobj-line'
depends = ['vim-textobj-user']
# hook_add = '''
# omap il <Plug>(textobj-line-l)
# vmap il <Plug>(textobj-line-l)
# '''

[[plugins]]
# インデントと改行を除く一行に対する操作.
repo = 'cohama/lexima.vim'
# hook_add = '''
# let g:lexima_enable_newline_rules = 0
# '''

[[plugins]]
# インデントをテキストオブジェクトに追加
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
# 区切り文字で整形
# alip=  段落を対象に=で位置を整形
# alip*| 段落を対象に同列内の全ての|の位置を整形, テーブル表記とか
# 選択-> Enter -> =入力  選択範囲で=位置で整形
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap al <Plug>(EasyAlign)
nmap al <Plug>(EasyAlign)
vmap <Enter> <Plug>(EasyAlign)
'''

[[plugins]]
# ""や()などを対象に追加削除置換する.
# saiw", srb", sdbなど
repo = 'machakann/vim-sandwich'

[[plugins]]
# 選択矩形の拡大縮小.
repo = 'terryma/vim-expand-region'
hook_add = '''
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
'''

[[plugins]]
# undotreeのTUI操作
repo = 'mbbill/undotree'
hook_add = '''
" undofileを保存したい場合
" if has("persistent_undo")
"    let target_path = expand('~/.undodir')
" 
"     " create the directory and any parent directories
"     " if the location does not exist.
"     if !isdirectory(target_path)
"         call mkdir(target_path, "p", 0700)
"     endif
" 
"     let &undodir=target_path
"     set undofile
" endif
let g:undotree_ShortIndicators = 1      " 時間単位は短く表示
let g:undotree_SetFocusWhenToggle = 1   " undotreeを開いたらフォーカスする
noremap <Leader>u :UndotreeToggle<CR>
" undotreeバッファ内でのキーバインド設定
function! g:Undotree_CustomMap()
    map <silent> <buffer> <Esc> q
    map <silent> <buffer> h ?
endfunction
'''

[[plugins]]
# 任意の単語をハイライト状態で維持する
# lazyだと動かない
repo = 't9md/vim-quickhl'
hook_add = '''
nmap <leader>ha <Plug>(quickhl-manual-this)
xmap <leader>ha <Plug>(quickhl-manual-this)
nmap <leader>hc <Plug>(quickhl-manual-clear)
xmap <leader>hc <Plug>(quickhl-manual-clear)
nmap <leader>hC <Plug>(quickhl-manual-reset)
'''

# [[plugins]]
# repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
hook_add = '''
" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" "" Using Lua functions
" "nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
" "nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
" "nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
" "nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>
'''

# [[plugins]]
# repo = 'airblade/vim-gitgutter'
# 
# [[plugins]]
# repo = 'tpope/vim-fugitive'
# 
# [[plugins]]
# # 文字検索時マッチング個数と何番目かを表示するプラグイン
# repo = 'osyo-manga/vim-anzu'
# hook_add = '''
# nmap n <Plug>(anzu-n-with-echo)
# nmap N <Plug>(anzu-N-with-echo)
# nmap * <Plug>(anzu-star-with-echo)
# nmap # <Plug>(anzu-sharp-with-echo)
# '''
# #nmap <Esc><Esc> <Plug>(anzu-clear-search-status)#効かない？
# 
# [[plugins]]
# # 多形式対応のシンタックスハイライト
# repo = 'sheerun/vim-polyglot'
# 
# [[plugins]]
# # インデントの可視化
# repo = 'Yggdroot/indentLine'
# 
# [[plugins]]
# # 行末空白の可視化
# repo = 'bronson/vim-trailing-whitespace'
# 
# [[plugins]]
# # 画面スクロール過程を可視化
# repo = 'yuttie/comfortable-motion.vim'
# 
# [[plugins]]
# # ウィンドウサイズ変更の簡易化
# repo = 'simeji/winresizer'
# hook_add = '''
# let g:winresizer_vert_resize = 2
# let g:winresizer_horiz_resize = 1
# '''
# 
# [[plugins]]
# # ウィンドウのひとつを最大化
# # 動くけどエラーがたくさんでる.NeoVim未対応？
# repo = 'vim-scripts/ZoomWin'
# 
# [[plugins]]
# # チートシート表示
# repo = 'reireias/vim-cheatsheet'
# hook_add = '''
# let g:cheatsheet#cheat_file = '~/.cheetsheets/sample.md'
# let g:cheatsheet#float_window = 1
# " you can change float window size.
# let g:cheatsheet#float_window_width_ratio = 0.6
# let g:cheatsheet#float_window_height_ratio = 0.6
# '''
# #augroup vimrc_filetype
# #  autocmd!
# #  autocmd FileType zsh let g:cheatsheet#cheat_file = '~/.cheatsheet-zsh.md'
# #augroup END
# 
# [[plugins]]
# # ファイルツリー
# repo = 'lambdalisue/fern.vim'
# hook_add = '''
# nnoremap <C-n> :Fern . -reveal=% -drawer -toggle -width=40<CR>
# '''
