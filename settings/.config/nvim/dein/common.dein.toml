[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
# f移動の補助.
# カーソル行に存在する各単語について、fで一発で移動できる場所(ユニークな文字)がハイライトされる.
# 移動後にciwなどで単語に対して操作する場合はその単語上のどの文字に移動してもいいので、そういう状況で便利.
repo = 'unblevable/quick-scope'
hook_add = '''
let g:qs_max_chars=120
'''

# [[plugins]]
# 検索ヒット文字数を表示.
# neovimだとバグる？
# repo = 'obcat/vim-hitspop'
# hook_add = '''
# '''

[[plugins]]
# w移動などの単語区切りを変更.
# ,-|>='"などが1単語として認識されず、スキップできる.
repo = 'kana/vim-smartword'
hook_add = '''
map w  <Plug>(smartword-w)
map b  <Plug>(smartword-b)
map e  <Plug>(smartword-e)
map ge  <Plug>(smartword-ge)
'''

# [[plugins]]
# # キャメルケース,スネークケースの移動とtextobjとして扱う機能.
# # ,はfの逆移動に遅延が起きるからちょっと悩む.(clever-f.vimを導入したことで,のマッピングは消えたので解決).
# # スネークケースでの移動選択もできる.AA_BB_CCでBBの上でdi,wを押すとAA_CCになる(後ろの_は消えるので注意).
# repo = 'bkad/CamelCaseMotion'
# hook_add = '''
# let g:camelcasemotion_key = ','
# '''

[[plugins]]
# 空白を無視したインデント数ベースの移動.
# sで同インデント内の移動.深いインデントから浅いインデントには抜けれる.現在行より浅いインデント行は無視される.
# Shiftで最も浅いインデント部分に移動.
# 開始と終了に^をつけることで,移動開始列に関係なく動作するようにしている.
repo = 'tyru/columnskip.vim'
hook_add = '''
map SJ ^<Plug>(columnskip:nonblank:next)^
map SK ^<Plug>(columnskip:nonblank:prev)^
map sj  ^<Plug>(columnskip:first-nonblank:next)^
map sk  ^<Plug>(columnskip:first-nonblank:prev)^
'''

[[plugins]]
# ドットリピートの多対応化.
repo = 'tpope/vim-repeat'


[[plugins]]
# operator操作系プラグインの依存元
repo = 'kana/vim-operator-user'

[[plugins]]
# オペレータ動作時にカーソルが開始地点に動くのを防ぐ.
repo = 'osyo-manga/vim-operator-stay-cursor'
depends = ['vim-operator-user']
hook_add = '''
map y <Plug>(operator-stay-cursor-yank)
map gu <Plug>(operator-stay-cursor-gu)
map gU <Plug>(operator-stay-cursor-gU)
'''

[[plugins]]
# ヤンク済みの文字列で上書きする.
repo = 'kana/vim-operator-replace'
depends = ['vim-operator-user']
hook_add = '''
nmap R <Plug>(operator-replace)
'''

[[plugins]]
# コメント操作.
# <Leader>; :トグル
repo = 'tyru/caw.vim'
depends = ['vim-operator-user']
hook_add = '''
nmap <Leader>;     <Plug>(caw:hatpos:toggle)
vmap <Leader>;     <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
# 長さが同じブロック行をtextobjとして扱う.
# C+vやvim-operator-blockwiseで同じことができるので直接使わない.
# vim-operator-blockwiseの必須プラグインなので導入している.
repo = 'osyo-manga/vim-textobj-blockwise'
depends = ['vim-textobj-user']

[[plugins]]
# 長さの違うブロック行に対するoperator.
# myiw, mRib, mdif/など.入力後に<ENTER>必須.
# yank時は最期の行しかハイライトが出ないので注意. vは対応してない.
repo = 'osyo-manga/vim-operator-blockwise'
depends = ['vim-textobj-blockwise', 'vim-operator-replace']
on_map = ['<Plug>(operator-blockwise-yank-head)', '<Plug>(operator-blockwise-delete-head)', '<Plug>(operator-blockwise-change-head)']
hook_add = '''
nmap my <Plug>(operator-blockwise-yank-head)
nmap md <Plug>(operator-blockwise-delete-head)
nmap mc <Plug>(operator-blockwise-change-head)
nmap <expr> mR operator#blockwise#mapexpr_head("\<Plug>(operator-replace)")
'''


[[plugins]]
# textobj拡張プラグインの依存元
repo = 'kana/vim-textobj-user'

[[plugins]]
# 行頭の空白と改行を除く一行をtextobjとして扱う.
# yil, dil, cil, vil
# hook_addでキーマップを書くと動かなくなる.
repo = 'kana/vim-textobj-line'
depends = ['vim-textobj-user']

[[plugins]]
# 任意の文字で挟まれた範囲をtextobjとして扱う.
# cif_, dif/ など
repo = 'thinca/vim-textobj-between'
depends = ['vim-textobj-user']

[[plugins]]
# (,)を区切りとする関数引数部分をtextobjとして扱う.
# ci,やda,など
repo = 'sgur/vim-textobj-parameter'
depends = ['vim-textobj-user']

[[plugins]]
# コメント部分をtextobjとして扱う.
# vac, dac など
# 複数行に対して実施する用途が主であり、複数行に対してはaを使う.
repo = 'glts/vim-textobj-comment'
depends = ['vim-textobj-user']

[[plugins]]
# 対象ブロック内をtextobjとして扱う.
# 対象は(),[],{},<>,"",''
# cib, yibなど.
# 囲み文字自体も範囲に含まれるのが特徴.
repo = 'osyo-manga/vim-textobj-multiblock'
depends = ['vim-textobj-user']
hook_add = '''
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
vmap ab <Plug>(textobj-multiblock-a)
vmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
# 同インデントの範囲をtextobjとして扱う.
# viiなど.
# 空行を無視できるのでvipとはそこで差別化できる.
# vaiは上下の外側の行も含まれるので、JSON形式などでは役立つかも.
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
# スネークケースやキャメルケースの1単語をtextobjとして扱う.
# div, dav, civなど.
# aaa_bbb_cccにおいて、avとすると aaa_(bbb_)cccが範囲になる.後ろの区切り文字が含まれる.
# キャメルケースの場合はaにしても範囲の変化はなし.
depends = ['vim-textobj-user']
repo = 'Julian/vim-textobj-variable-segment'

[[plugins]]
# ""や()などを対象に追加削除置換する.
# saiw", srb", sdbなど
# 範囲選択にも対応している.範囲選択してsai->左側の囲い文字を入力してEnter->右側の囲い文字を入力してEnter
repo = 'machakann/vim-sandwich'

[[plugins]]
# 選択矩形の拡大縮小.
repo = 'terryma/vim-expand-region'
hook_add = '''
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
'''

[[plugins]]
# 任意の単語をハイライト状態で維持する
# lazyだと動かない
# ハイライトのON/OFF: 単語上で<LEADER>ha
# ハイライトを全て消す: <LEADER>hC
repo = 't9md/vim-quickhl'
hook_add = '''
nmap <leader>ha <Plug>(quickhl-manual-this)
xmap <leader>ha <Plug>(quickhl-manual-this)
nmap <leader>hc <Plug>(quickhl-manual-clear)
xmap <leader>hc <Plug>(quickhl-manual-clear)
nmap <leader>hC <Plug>(quickhl-manual-reset)
'''

[[plugins]]
# 範囲選択箇所同士のdiff結果をバッファに開く.
# 選択して:Linediff -> もう一か所選択して:Linediff.
repo = 'AndrewRadev/linediff.vim'
